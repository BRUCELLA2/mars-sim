/**
 * Mars Simulation Project
 * PowerGridTabPanel.java
 * @version 2.75 2003-06-03
 * @author Scott Davis
 */

package org.mars_sim.msp.ui.standard.unit_window.structure;

import org.mars_sim.msp.simulation.structure.Settlement;
import org.mars_sim.msp.simulation.structure.building.*;
import org.mars_sim.msp.simulation.structure.building.function.PowerGeneration;
import org.mars_sim.msp.ui.standard.*;
import org.mars_sim.msp.ui.standard.unit_window.TabPanel;
import java.awt.*;
import java.text.DecimalFormat;
import java.util.*;
import javax.swing.*;
import javax.swing.table.*;

/** 
 * The PowerGridTabPanel is a tab panel for a settlement's power grid information.
 */
public class PowerGridTabPanel extends TabPanel {
    
    // Data Members
    private JLabel powerGeneratedLabel; // The total power generated label.
    private JLabel powerUsedLabel; // The total power used label.
    
    // Data cache
    private double powerGeneratedCache; // The total power generated cache.
    private double powerUsedCache; // The total power used cache.
    
    private DecimalFormat formatter = new DecimalFormat("0.0");
    
    /**
     * Constructor
     *
     * @param proxy the UI proxy for the unit.
     * @param desktop the main desktop.
     */
    public PowerGridTabPanel(UnitUIProxy proxy, MainDesktopPane desktop) { 
        
        // Use the TabPanel constructor
        super("Power", null, "Power Grid", proxy, desktop);
        
        Settlement settlement = (Settlement) proxy.getUnit();
        
        // Prepare power grid label panel.
        JPanel powerGridLabelPanel = new JPanel(new FlowLayout(FlowLayout.CENTER));
        topContentPanel.add(powerGridLabelPanel);
        
        // Prepare power grid label.
        JLabel powerGridLabel = new JLabel("Power Grid", JLabel.CENTER);
        powerGridLabelPanel.add(powerGridLabel);
        
        // Prepare power info panel.
        JPanel powerInfoPanel = new JPanel(new GridLayout(2, 1, 0, 0));
        powerInfoPanel.setBorder(new MarsPanelBorder());
        topContentPanel.add(powerInfoPanel);
        
        // Prepare power generated label.
        powerGeneratedCache = getTotalPowerGenerated();
        powerGeneratedLabel = new JLabel("Total Power Generated: " + 
            formatter.format(powerGeneratedCache) + " kW.", JLabel.CENTER);
        powerInfoPanel.add(powerGeneratedLabel);
        
        // Prepare power used label.
        powerUsedCache = getTotalPowerUsed();
        powerUsedLabel = new JLabel("Total Power Used: " + 
            formatter.format(powerUsedCache) + " kW.", JLabel.CENTER);
        powerInfoPanel.add(powerUsedLabel);
        
    }
    
    /**
     * Updates the info on this panel.
     */
    public void update() {
        Settlement settlement = (Settlement) proxy.getUnit();
        
        // Update power generated label.
        if (powerGeneratedCache != getTotalPowerGenerated()) {
            powerGeneratedCache = getTotalPowerGenerated();
            powerGeneratedLabel.setText("Total Power Generated: " + 
                formatter.format(powerGeneratedCache) + " kW.");
        }
        
        // Update power used label.
        if (powerUsedCache != getTotalPowerUsed()) {
            powerUsedCache = getTotalPowerUsed();
            powerUsedLabel.setText("Total Power Used: " + 
                formatter.format(powerUsedCache) + " kW.");
        }
        
    }
    
    /**
     * Gets the total power generated by all the buildings in the settlement.
     *
     * @return power generated in kW.
     */
    private double getTotalPowerGenerated() {
        
        double result = 0D;
        Settlement settlement = (Settlement) proxy.getUnit();
        Iterator i = settlement.getBuildingManager().getBuildings(PowerGeneration.class).iterator();
        while (i.hasNext()) {
            PowerGeneration generator = (PowerGeneration) i.next();
            result += generator.getGeneratedPower();
        }
        
        return result;
    }
    
    /**
     * Gets the total power used by all the buildings in the settlement.
     *
     * @return power used in kW.
     */
    private double getTotalPowerUsed() {
        
        double result = 0D;
        Settlement settlement = (Settlement) proxy.getUnit();
        Iterator i = settlement.getBuildingManager().getBuildings().iterator();
        while (i.hasNext()) {
            Building building = (Building) i.next();
            double powerUsed = 0D;
            if (building.getPowerMode().equals(Building.FULL_POWER)) 
                powerUsed = building.getFullPowerRequired();
            else if (building.getPowerMode().equals(Building.POWER_DOWN))
                powerUsed = building.getPoweredDownPowerRequired();
            result += powerUsed;
        }
        
        return result;
    }
}
            
